name: Build & Push to ECR (Secrets with Account ID)

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      # 1) 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 17 설정
      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # 4) ECR 로그인
      - name: ECR Login
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # 5) 이미지 태그 구성
      - name: Prepare tags
        id: prep
        run: |
          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "REPO_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-app-repo" >> $GITHUB_ENV

      # 6) Gradle 권한 부여
      - name: Gradle Wrapper 실행 권한 부여
        run: chmod +x ./gradlew

      # 7) Docker 빌드
      - name: Docker build
        run: |
          docker build -t "$REPO_URI:$IMAGE_TAG" -t "$REPO_URI:latest" .

      # 8) ECR 푸시
      - name: Docker push
        run: |
          docker push "$REPO_URI:$IMAGE_TAG"
          docker push "$REPO_URI:latest"

      # 9) 작업 정의 템플릿 렌더링
      - name: Render task definition
        run: |
          sudo apt-get update -y && sudo apt-get install -y gettext-base
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          envsubst < ecs-task-def.json > task-def.rendered.json
          echo "=== Rendered task def ==="
          cat task-def.rendered.json

      # 🔧 10) jq 설치 (JSON 파싱용)
      - name: Install jq
        run: sudo apt-get install -y jq

      # ✅ 11) 작업 정의 등록 & ARN 추출
      - name: Register task definition and extract ARN
        id: register_task
        run: |
          REVISION_JSON=$(aws ecs register-task-definition \
            --cli-input-json file://task-def.rendered.json)
          TASK_DEF_ARN=$(echo $REVISION_JSON | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      # ✅ 12) ECS 서비스 업데이트 (정확한 리비전 사용)
      - name: ECS 서비스 업데이트
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $TASK_DEF_ARN \
            --force-new-deployment

      # 13) 배포 완료 대기
      - name: ECS 배포 완료 대기
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }}

      # 14) 배포 상태 확인
      - name: ECS 배포 상태 확인
        run: |
          aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --query "services[0].deployments"